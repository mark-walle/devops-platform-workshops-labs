apiVersion: template.openshift.io/v1
kind: Template
labels:
  template: prometheus-template
message: |-
  The following service(s) have been created in your project: ${PROMETHEUS_SERVICE_NAME}.
metadata:
  annotations:
    description: |-
      Prometheus Template for use in OpenShift 201 lab without persistent storage.

      WARNING: Any configuration stored will be lost upon pod destruction. ConfigMaps should be used for codified configuration.
    iconClass: icon-other-unknown
    openshift.io/display-name: prometheus-openshift201
    openshift.io/documentation-url: https://github.com/bcdevops/devops-platform-workshops
    openshift.io/long-description: This template provides a sample Prometheus configuration.
    openshift.io/provider-display-name: BCDevOps
    openshift.io/support-url: https://github.com/bcdevops/
    tags: monitoring,prometheus
  name: prometheus-template
objects:
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: prometheus
      component: ${PROMETHEUS_SERVICE_NAME}
      heritage: Tiller
      release: ${PROMETHEUS_SERVICE_NAME}
    name: ${PROMETHEUS_SERVICE_NAME}-${PROMETHEUS_SERVICE_NAME}
  spec:
    clusterIP: 172.50.106.222
    ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: 9090
    selector:
      app: prometheus
      component: ${PROMETHEUS_SERVICE_NAME}
      release: ${PROMETHEUS_SERVICE_NAME}
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: prometheus
      chart: prometheus-8.11.4
      component: ${PROMETHEUS_SERVICE_NAME}
      heritage: Tiller
      release: ${PROMETHEUS_SERVICE_NAME}
    name: ${PROMETHEUS_SERVICE_NAME}-${PROMETHEUS_SERVICE_NAME}
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: prometheus
        component: ${PROMETHEUS_SERVICE_NAME}
        release: ${PROMETHEUS_SERVICE_NAME}
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: prometheus
          component: ${PROMETHEUS_SERVICE_NAME}
          heritage: Tiller
          release: ${PROMETHEUS_SERVICE_NAME}
      spec:
        containers:
        - args:
          - --volume-dir=/etc/config
          - --webhook-url=http://127.0.0.1:9090/-/reload
          image: jimmidyson/configmap-reload:v0.2.2
          imagePullPolicy: IfNotPresent
          name: prometheus-${PROMETHEUS_SERVICE_NAME}-configmap-reload
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/config
            name: config-volume
            readOnly: true
        - args:
          - --config.file=/etc/config/prometheus.yml
          - --storage.tsdb.path=/data
          - --web.console.libraries=/etc/prometheus/console_libraries
          - --web.console.templates=/etc/prometheus/consoles
          - --web.enable-lifecycle
          image: prom/prometheus:v2.9.2
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /-/healthy
              port: 9090
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 30
          name: prometheus-${PROMETHEUS_SERVICE_NAME}
          ports:
          - containerPort: 9090
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /-/ready
              port: 9090
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 30
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/config
            name: config-volume
          - mountPath: /data
            name: storage-volume
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: default
        serviceAccountName: default
        terminationGracePeriodSeconds: 300
        volumes:
        - configMap:
            defaultMode: 420
            name: ${PROMETHEUS_SERVICE_NAME}-${PROMETHEUS_SERVICE_NAME}
          name: config-volume
        - name: storage-volume
          persistentVolumeClaim:
            claimName: ${PROMETHEUS_SERVICE_NAME}-${PROMETHEUS_SERVICE_NAME}
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    annotations:
      openshift.io/host.generated: "true"
    creationTimestamp: 2019-05-27T18:11:03Z
    labels:
      app: prometheus
    name: prometheus
    namespace: ${NAMESPACE}
  spec:
    host: prometheus-${NAMESPACE}.${ROUTE_SUBDOMAIN}
    port:
      targetPort: http
    to:
      kind: Service
      name: ${PROMETHEUS_SERVICE_NAME}-${PROMETHEUS_SERVICE_NAME}
      weight: 100
    wildcardPolicy: None
  status:
    ingress:
    - conditions:
      - lastTransitionTime: 2019-05-27T18:11:03Z
        status: "True"
        type: Admitted
      host: prometheus-${NAMESPACE}.${ROUTE_SUBDOMAIN}
      routerName: router
      wildcardPolicy: None
- apiVersion: v1
  data:
    alerts: |
      {}
    prometheus.yml: |
      global:
        evaluation_interval: 1m
        scrape_interval: 1m
        scrape_timeout: 10s
      rule_files:
      - /etc/config/rules
      - /etc/config/alerts
      scrape_configs:
      - job_name: prometheus
        static_configs:
        - targets:
          - localhost:9090
      - job_name: kubernetes-pods
        kubernetes_sd_configs:
        - role: pod
          namespaces:
              names:
                - ${NAMESPACE}
        relabel_configs:
        - action: keep
          regex: true
          source_labels:
          - __meta_kubernetes_pod_annotation_prometheus_io_scrape
        - action: replace
          regex: (.+)
          source_labels:
          - __meta_kubernetes_pod_annotation_prometheus_io_path
          target_label: __metrics_path__
        - action: replace
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
          source_labels:
          - __address__
          - __meta_kubernetes_pod_annotation_prometheus_io_port
          target_label: __address__
        - action: labelmap
          regex: __meta_kubernetes_pod_label_(.+)
        - action: replace
          source_labels:
          - __meta_kubernetes_namespace
          target_label: kubernetes_namespace
        - action: replace
          source_labels:
          - __meta_kubernetes_pod_name
          target_label: kubernetes_pod_name
    rules: |
      {}
  kind: ConfigMap
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","data":{"alerts":"{}\n","prometheus.yml":"global:\n  evaluation_interval: 1m\n  scrape_interval: 1m\n  scrape_timeout: 10s\nrule_files:\n- /etc/config/rules\n- /etc/config/alerts\nscrape_configs:\n- job_name: prometheus\n  static_configs:\n  - targets:\n    - localhost:9090\n- job_name: kubernetes-pods\n  kubernetes_sd_configs:\n  - role: pod\n    namespaces:\n        names:\n          - ${NAMESPACE}\n  relabel_configs:\n  - action: keep\n    regex: true\n    source_labels:\n    - __meta_kubernetes_pod_annotation_prometheus_io_scrape\n  - action: replace\n    regex: (.+)\n    source_labels:\n    - __meta_kubernetes_pod_annotation_prometheus_io_path\n    target_label: __metrics_path__\n  - action: replace\n    regex: ([^:]+)(?::\\d+)?;(\\d+)\n    replacement: $1:$2\n    source_labels:\n    - __address__\n    - __meta_kubernetes_pod_annotation_prometheus_io_port\n    target_label: __address__\n  - action: labelmap\n    regex: __meta_kubernetes_pod_label_(.+)\n  - action: replace\n    source_labels:\n    - __meta_kubernetes_namespace\n    target_label: kubernetes_namespace\n  - action: replace\n    source_labels:\n    - __meta_kubernetes_pod_name\n    target_label: kubernetes_pod_name\n","rules":"{}\n"},"kind":"ConfigMap","metadata":{"annotations":{},"labels":{"app":"prometheus","chart":"prometheus-8.11.4","component":"${PROMETHEUS_SERVICE_NAME}","heritage":"Tiller","release":"${PROMETHEUS_SERVICE_NAME}"},"name":"${PROMETHEUS_SERVICE_NAME}-${PROMETHEUS_SERVICE_NAME}","namespace":"${NAMESPACE}"}}
    labels:
      app: prometheus
      chart: prometheus-8.11.4
      component: ${PROMETHEUS_SERVICE_NAME}
      heritage: Tiller
      release: ${PROMETHEUS_SERVICE_NAME}
    name: ${PROMETHEUS_SERVICE_NAME}-${PROMETHEUS_SERVICE_NAME}
parameters:
- description: Maximum amount of memory the container can use.
  displayName: Memory Limit
  name: MEMORY_LIMIT
  required: true
  value: 512Mi
- description: The namespace this templated is deployed into.
  displayName: Namespace
  name: NAMESPACE
  value: openshift
- description: The name of the OpenShift Service exposed for the database.
  displayName: Grafana Service Name
  name: GRAFANA_SERVICE_NAME
  required: true
  value: grafana
- description: The name of the Loki service to connect to.
  displayName: Loki Service Name
  name: LOKI_SERVICE_NAME
  required: true
  value: loki
- description: The name of the Prometheus service to connect to.
  displayName: Prometheus Service Name
  name: PROMETHEUS_SERVICE_NAME
  required: true
  value: prometheus
- description: Default route subdomain
  displayName: Route subdomain
  name: ROUTE_SUBDOMAIN
  required: true
  value: pathfinder.gov.bc.ca
